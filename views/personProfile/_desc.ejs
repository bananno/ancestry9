<%
  // Settings will not be modified automatically. Change settings for desired display.
  const settings = {
    showErrors: true,
  };

  const safety = (locals.safety || 0) + 1;

  if (safety > 15) {
    throw `[ERROR] descendants chart reached ${safety} layers`;
  }

  const person = findPersonInList(people, locals.person);

  const personInfo = person.getDescendantChartInfo({
    findPersonInList,
    marriageEvents,
    people,
    toDoList,
  });

  const childrenListed = [];
%>

<p class="person-item">
  <b>
    <%- include('../person/_link', {
      person,
      linkText: person.getMaidenName(),
    }) %>
  </b>
  <span class="life-dates">(<%= getLifeDatesString(person) %>)</span>
  <% if (settings.showErrors && personInfo.errors.length) { %>
    <span class="error"><%= personInfo.errors.join(' ') %></span>
  <% } %>
</p>

<% person.spouses.forEach(spouseId => { %>
  <%
    const spouse = findPersonInList(people, spouseId);

    const spouseChildren = personInfo.children.filter((child, i) => {
      if (findPersonInList(child.parents, spouse)) {
        childrenListed.push(child);
        return true;
      }
      return false;
    });

    let foundMarriageEvent = false;

    const marriageEventsFormat = personInfo.personMarriageEvents.filter(event => {
      return findPersonInList(event.people, spouse);
    }).map(event => {
      if (event.title === 'marriage') {
        foundMarriageEvent = true;
        return 'married ' + formatEventDate(event);
      }
      return 'divorced ' + formatEventDate(event);
    }).join('; ');

    if (!foundMarriageEvent) {
      toDoList.push({
        person: spouse,
        missing: 'marriage event',
        priority: 2,
      });
    }
  %>
  <p class="person-item">
    + <%- include('../person/_link', {person: spouse}) %>
    <% if (settings.showErrors) { %>
      <span class="life-dates">
        (<%= getLifeDatesString(spouse) %>;
        <%= marriageEventsFormat || 'married when?' %>)
      </span>
      <% if (!spouse.getBirthYear()) { %>
        <span class="error">birth?</span>
      <% } %>
      <% if (!spouse.living && !spouse.getDeathYear()) { %>
        <span class="error">death?</span>
      <% } %>
      <% if (!foundMarriageEvent) { %>
        <span class="error">marriage?</span>
      <% } %>
    <% } %>
  </p>
  <ul>
    <% spouseChildren.forEach(child => { %>
      <li>
        <%- include('./_desc', {person: child, toDoList, safety}) %>
      </li>
    <% }); %>
  </ul>
<% }); %>

<%
  const additionalChildren = person.children.filter(child => {
    if (!findPersonInList(childrenListed, child)) {
      toDoList.push({
        person: child,
        missing: 'parent',
        priority: 1,
      });
      return true;
    }
    return false;
  });
%>

<% if (additionalChildren.length) { %>
  <p class="person-item">
    + unknown spouse
  </p>
  <ul>
    <% additionalChildren.forEach(child => { %>
      <li>
        <%- include('./_desc', {person: child, toDoList, safety}) %>
      </li>
    <% }); %>
  </ul>
<% } %>
